// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package auth

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA818f49aDecodeScholacantorumOrgOrdersAuth(in *jlexer.Lexer, out *ssoLogin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "username":
			out.Username = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "city":
			out.City = string(in.String())
		case "state":
			out.State = string(in.String())
		case "zip":
			out.Zip = string(in.String())
		case "privSetupOrders":
			out.PrivSetupOrders = bool(in.Bool())
		case "privViewOrders":
			out.PrivViewOrders = bool(in.Bool())
		case "privManageOrders":
			out.PrivManageOrders = bool(in.Bool())
		case "privInPersonSales":
			out.PrivInPersonSales = bool(in.Bool())
		case "privScanTickets":
			out.PrivScanTickets = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA818f49aEncodeScholacantorumOrgOrdersAuth(out *jwriter.Writer, in ssoLogin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"zip\":"
		out.RawString(prefix)
		out.String(string(in.Zip))
	}
	{
		const prefix string = ",\"privSetupOrders\":"
		out.RawString(prefix)
		out.Bool(bool(in.PrivSetupOrders))
	}
	{
		const prefix string = ",\"privViewOrders\":"
		out.RawString(prefix)
		out.Bool(bool(in.PrivViewOrders))
	}
	{
		const prefix string = ",\"privManageOrders\":"
		out.RawString(prefix)
		out.Bool(bool(in.PrivManageOrders))
	}
	{
		const prefix string = ",\"privInPersonSales\":"
		out.RawString(prefix)
		out.Bool(bool(in.PrivInPersonSales))
	}
	{
		const prefix string = ",\"privScanTickets\":"
		out.RawString(prefix)
		out.Bool(bool(in.PrivScanTickets))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ssoLogin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA818f49aEncodeScholacantorumOrgOrdersAuth(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ssoLogin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA818f49aEncodeScholacantorumOrgOrdersAuth(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ssoLogin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA818f49aDecodeScholacantorumOrgOrdersAuth(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ssoLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA818f49aDecodeScholacantorumOrgOrdersAuth(l, v)
}
