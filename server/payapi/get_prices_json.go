package payapi

// Code generated by easyjson and hand-edited.

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func encodeGetPricesResponseSession(out *jwriter.Writer, in getPricesResponseSession) {
	out.RawByte('{')
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	if in.Address != "" {
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	if in.Zip != "" {
		const prefix string = ",\"zip\":"
		out.RawString(prefix)
		out.String(string(in.Zip))
	}
	out.RawByte('}')
}

func encodeGetPricesResponse(out *jwriter.Writer, in getPricesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.User != nil {
		const prefix string = ",\"user\":"
		first = false
		out.RawString(prefix[1:])
		encodeGetPricesResponseSession(out, *in.User)
	}
	if in.StripePublicKey != "" {
		const prefix string = ",\"stripePublicKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StripePublicKey))
	}
	{
		const prefix string = ",\"coupon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Coupon))
	}
	{
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Products {
				if v2 > 0 {
					out.RawByte(',')
				}
				encodeGetPricesData(out, *v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

func encodeGetPricesData(out *jwriter.Writer, in getPricesData) {
	out.RawByte('{')
	{
		const prefix string = "\"id\":"
		out.RawString(prefix)
		out.String(string(in.id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.name))
	}
	if in.message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.message))
	} else {
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.price))
	}
	out.RawByte('}')
}
