package model

// Code generated by easyjson and hand-edited.

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func encodeReportResults(out *jwriter.Writer, in *ReportResults) {
	out.RawByte('{')
	{
		const prefix string = ",\"orderCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OrderCount))
	}
	{
		const prefix string = ",\"itemCount\":"
		out.RawString(prefix)
		out.Int(int(in.ItemCount))
	}
	{
		const prefix string = ",\"totalAmount\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalAmount))
	}
	if len(in.Lines) != 0 {
		const prefix string = ",\"lines\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Lines {
				if v8 > 0 {
					out.RawByte(',')
				}
				encodeReportLine(out, v9)
			}
			out.RawByte(']')
		}
	}
	if len(in.OrderSources) != 0 {
		const prefix string = ",\"orderSources\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			v10First := true
			for v10Name, v10Value := range in.OrderSources {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				{
					const prefix string = "{\"os\":"
					out.RawString(prefix)
					out.String(string(v10Name))
				}
				{
					const prefix string = ",\"c\":"
					out.RawString(prefix)
					out.Int(int(v10Value))
				}
				out.RawByte('}')
			}
			out.RawByte(']')
		}
	}
	if len(in.OrderCoupons) != 0 {
		const prefix string = ",\"orderCoupons\":"
		out.RawString(prefix)
		encodeStringCounts(out, in.OrderCoupons)
	}
	if len(in.Products) != 0 {
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Products {
				if v12 > 0 {
					out.RawByte(',')
				}
				encodeReportProductCount(out, v13)
			}
			out.RawByte(']')
		}
	}
	if len(in.PaymentTypes) != 0 {
		const prefix string = ",\"paymentTypes\":"
		out.RawString(prefix)
		encodeStringCounts(out, in.PaymentTypes)
	}
	if len(in.TicketClasses) != 0 {
		const prefix string = ",\"ticketClasses\":"
		out.RawString(prefix)
		encodeStringCounts(out, in.TicketClasses)
	}
	if len(in.UsedAtEvents) != 0 {
		const prefix string = ",\"usedAtEvents\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v16, v17 := range in.UsedAtEvents {
				if v16 > 0 {
					out.RawByte(',')
				}
				encodeReportEventCount(out, v17)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

func (v *ReportResults) ToJSON() []byte {
	w := jwriter.Writer{}
	encodeReportResults(&w, v)
	return w.Buffer.BuildBytes()
}

func encodeStringCounts(out *jwriter.Writer, in StringCounts) {
	out.RawByte('[')
	first := true
	for n, c := range in {
		if first {
			first = false
		} else {
			out.RawByte(',')
		}
		{
			const prefix string = "{\"n\":"
			out.RawString(prefix)
			out.String(n)
		}
		{
			const prefix string = ",\"c\":"
			out.RawString(prefix)
			out.Int(c)
		}
		out.RawByte('}')
	}
	out.RawByte(']')
}

func encodeReportProductCount(out *jwriter.Writer, in *ReportProductCount) {
	out.RawByte('{')
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"series\":"
		out.RawString(prefix)
		out.String(string(in.Series))
	}
	{
		const prefix string = ",\"ptype\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

func encodeReportLine(out *jwriter.Writer, in *ReportLine) {
	out.RawByte('{')
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OrderID))
	}
	{
		const prefix string = ",\"orderTime\":"
		out.RawString(prefix)
		out.Raw((in.OrderTime).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Int(int(in.Quantity))
	}
	{
		const prefix string = ",\"product\":"
		out.RawString(prefix)
		out.String(string(in.Product))
	}
	{
		const prefix string = ",\"usedAtEvent\":"
		out.RawString(prefix)
		out.String(string(in.UsedAtEvent))
	}
	{
		const prefix string = ",\"orderSource\":"
		out.RawString(prefix)
		out.String(string(in.OrderSource))
	}
	{
		const prefix string = ",\"paymentType\":"
		out.RawString(prefix)
		out.String(string(in.PaymentType))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	out.RawByte('}')
}

func encodeReportEventCount(out *jwriter.Writer, in *ReportEventCount) {
	out.RawByte('{')
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		if in.Start.IsZero() {
			out.RawString("\"\"")
		} else {
			out.Raw((in.Start).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"series\":"
		out.RawString(prefix)
		out.String(string(in.Series))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}
