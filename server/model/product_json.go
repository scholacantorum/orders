package model

// Code generated by easyjson and hand-edited.

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func encodeSKU(out *jwriter.Writer, in *SKU) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Source != "" {
		const prefix string = ",\"source\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	if in.Coupon != "" {
		const prefix string = ",\"coupon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Coupon))
	}
	if !in.SalesStart.IsZero() {
		const prefix string = ",\"salesStart\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.SalesStart).MarshalJSON())
	}
	if !in.SalesEnd.IsZero() {
		const prefix string = ",\"salesEnd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.SalesEnd).MarshalJSON())
	}
	if in.Price != 0 {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Price))
	}
	out.RawByte('}')
}

func encodeProductEvent(out *jwriter.Writer, in ProductEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Priority))
	}
	if in.Event != nil {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Event.ID))
	}
	out.RawByte('}')
}

func encodeProduct(out *jwriter.Writer, in *Product) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Series != "" {
		const prefix string = ",\"series\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Series))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.ShortName != "" {
		const prefix string = ",\"shortName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShortName))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Receipt != "" {
		const prefix string = ",\"receipt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Receipt))
	}
	if in.TicketCount != 0 {
		const prefix string = ",\"ticketCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TicketCount))
	}
	if in.TicketClass != "" {
		const prefix string = ",\"ticketClass\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TicketClass))
	}
	if len(in.SKUs) != 0 {
		const prefix string = ",\"skUs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.SKUs {
				if v3 > 0 {
					out.RawByte(',')
				}
				encodeSKU(out, v4)
			}
			out.RawByte(']')
		}
	}
	if len(in.Events) != 0 {
		const prefix string = ",\"events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Events {
				if v5 > 0 {
					out.RawByte(',')
				}
				encodeProductEvent(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v *Product) ToJSON() []byte {
	w := jwriter.Writer{}
	encodeProduct(&w, v)
	return w.Buffer.BuildBytes()
}
